// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class Config {
    /**
     * Creates a new Config instance.
     * @param {Partial<Config>} [$$source = {}] - The source object to create the Config.
     */
    constructor($$source = {}) {
        if (!("background" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["background"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Config instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Config}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Config(/** @type {Partial<Config>} */($$parsedSource));
    }
}

export class ExecResult {
    /**
     * Creates a new ExecResult instance.
     * @param {Partial<ExecResult>} [$$source = {}] - The source object to create the ExecResult.
     */
    constructor($$source = {}) {
        if (!("pid" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["pid"] = 0;
        }
        if (!("stdOut" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["stdOut"] = "";
        }
        if (!("stdErr" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["stdErr"] = "";
        }
        if (!("exitCode" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["exitCode"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ExecResult instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ExecResult}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ExecResult(/** @type {Partial<ExecResult>} */($$parsedSource));
    }
}
